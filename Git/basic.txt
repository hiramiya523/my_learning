■基本
＃＃＃　初期設定
git config --global user.name "hogehoge"

＃＃ 初期設定確認
git config --list

＃＃ 初期設定の保存場所
ホームディレクトリ下
cat ~/.gitconfig

＃＃＃ git のバージョン管理の仕組み
差分ではなく、スナップショット（丸ごと）を記録している。
データを圧縮して、スナップショットを保存して管理する仕組み。
---
＃Gitオブジェクト
git add や git commit した時、「圧縮ファイル」「ツリーファイル」「コミットファイル」が作成される。
Gitではこれらのファイルを「Gitオブジェクト」。「.git/objects」ディレクトリの下に保存されます。

＃圧縮ファイル
正確には「blob（ブロブ）オブジェクト」と言います。blobというのは「カタマリ」という意味です。
圧縮ファイルのファイル名は実際はハッシュIDになります。
ハッシュIDというのは、ヘッダー（ファイル内容の文字数など、ファイルのメタ情報）とファイル内容を、SHA-1というハッシュ関数で40文字の英数字に変換したものです。ハッシュIDのうち、先頭2文字をディレクトリ名に、残り38文字をファイル名にして保存します。
git hash-object hogehoge // ハッシュID確認

＃　ツリーファイル
圧縮ファイルは、ファイルの中身を圧縮したものを保存していて、圧縮ファイルのファイル名もファイルの中身をベースにハッシュ関数で作成されたものでした。つまり、圧縮ファイルにはもともとのファイル名の情報がどこにも残っていないことになります。
そこで、ファイル名とファイルの中身の組み合わせ（ファイル構造）を保存するためにあるのがツリーファイルでしたね。コミットをするとツリーファイルが作成されます。ツリーファイルは「treeオブジェクト」と言います。
実際は、ディレクトリの一つの階層ごとに一つのツリーファイルになっていて、ツリーファイルには圧縮ファイルだけでなくツリーファイルも保存されています。
Gitオブジェクトの中身を確認するにはgit cat-file -p <オブジェクト名> （オブジェクト名はGitオブジェクトのハッシュIDやブランチ名など。

＃＃＃作業場
＃＃　ローカル環境
ワークツリー　＜　ステージ　＜　リポジトリ
ワークツリー：作業場
ステージ：コミットする変更を準備する場


＃＃＃　ローカルリポジトリの作成
cd 作業dir
git init  // .gitディレクトリを作成. 設定、Gitオブジェクトなどが入っている

＃＃＃ github上にあるリポジトリをローカルに落としたいとき
git clone hoge-url
.Gitと、ファイルがコピーできる

### ステージに変更を追加する
git add hoge.txt

### 変更を記録する(ツリーファイルとコミットファイルの作成)
git commit -v
-v はコミット前に変更内容を確認する。

### 現在の変更状況を確認（ワークツリー、ステージ、ローカルリポ）
git status


## 変更差分の確認
# git add前の差分
git diff hoge.txt

#git add後の差分
git diff --staged

### リモートリポジトリにpushz(personal access tokensの認証が必要)
git remote add origin https://hogeリポ.git   // リポジトリの登録
git push -u origin master // -uを初回につけると、次回以降git push で実行可能

### コマンドにエイリアスをつける
git congig --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout
// global はｐｃ全体の設定と考えてよいhomeディレクトリ下に設定

### バージョン管理から外す
.gitignoreファイルに指定する。
# から始まる行はコメント
ファイル名を指定、ディレクトリ以下を指定、*指定も可能

### ファイルの変更を取り消す(ワークツリーの状態をステージの状態に合わせる)
git checkout -- hoge.txt
git checkout -- <dir>
// 全変更を取り消す
git checkout -- .


### ステージにaddした変更を取り消す（ワークツリーも戻すには上記のコマンドを実施）
git reset HEAD <filex>
git reset HEAD <dir>
git reset HEAD .
// HEADは最新のもの


### 直前のコミットをやり直す
git commit --amend